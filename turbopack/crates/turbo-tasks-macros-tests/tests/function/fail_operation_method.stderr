error: methods taking `self` are not supported with `operation`
  --> tests/function/fail_operation_method.rs:13:17
   |
13 |     fn self_ref(&self) -> Vc<()> {
   |                 ^^^^^

error: methods taking `self` are not supported with `operation`
  --> tests/function/fail_operation_method.rs:18:28
   |
18 |     fn arbitrary_self_type(self: OperationVc<Self>) -> Vc<()> {
   |                            ^^^^^^^^^^^^^^^^^^^^^^^

error: methods taking `self` are not supported with `operation`
  --> tests/function/fail_operation_method.rs:23:36
   |
23 |     fn arbitrary_self_type_base_vc(self: Vc<Self>) -> Vc<()> {
   |                                    ^^^^^^^^^^^^^^

error[E0307]: invalid `self` parameter type: `OperationVc<Foobar>`
  --> tests/function/fail_operation_method.rs:18:34
   |
18 |     fn arbitrary_self_type(self: OperationVc<Self>) -> Vc<()> {
   |                                  ^^^^^^^^^^^^^^^^^
   |
   = note: type of `self` must be `Self` or a type that dereferences to it
   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)

error[E0277]: the trait bound `Vc<Foobar>: OperationValue` is not satisfied
  --> tests/function/fail_operation_method.rs:23:42
   |
23 |     fn arbitrary_self_type_base_vc(self: Vc<Self>) -> Vc<()> {
   |                                          ^^^^^^^^ the trait `OperationValue` is not implemented for `Vc<Foobar>`
   |
   = help: the following other types implement trait `OperationValue`:
             &T
             &mut T
             ()
             (A, Z, Y, X, W, V, U, T)
             (B, A, Z, Y, X, W, V, U, T)
             (C, B, A, Z, Y, X, W, V, U, T)
             (D, C, B, A, Z, Y, X, W, V, U, T)
             (E, D, C, B, A, Z, Y, X, W, V, U, T)
           and $N others
note: required by a bound in `assert_argument_is_operation_value`
  --> $WORKSPACE/turbopack/crates/turbo-tasks/src/macro_helpers.rs
   |
   | pub fn assert_argument_is_operation_value<Argument: OperationValue>() {}
   |                                                     ^^^^^^^^^^^^^^ required by this bound in `assert_argument_is_operation_value`
